{"file_contents":{"README.md":{"content":"# Public Servant Salary Data API\n\nThis API provides access to publicly accessible salary information based on classifications and levels.\n The information is sourced from [TBS-SCT Canada](https://www.tbs-sct.canada.ca/pubs_pol/hrpubs/coll_agre/rates-taux-eng.asp) and is available through a set of endpoints.\n\n## Important Disclaimer\nThis API and website are not affiliated with, endorsed, or sponsored by the Government of Canada.\nThe information provided is sourced from publicly available data and is provided for educational and informational purposes only.\n\n## Endpoints\n\n- `/api/data`: Returns the full JSON containing salary data for all classifications and levels.\n- `/api/top`: Returns the top salary level for each classification and level.\n- `/api/[classification-level]`: Returns the full salary information for a specific classification and level (e.g., `/api/cs-01`).\n- `/api/[classification-level]/[step-#]`: Returns the salary for the specified step of a classification and level (e.g., `/api/cr-1/step-3`).\n- `/api/[classification-level]/top`: Returns the top salary amount of the specified classification and level (e.g., `/api/as-4/top`).\n\n## Usage\n\nTo use the API, send HTTP requests to the specified endpoints using your preferred method (e.g., cURL, Python requests, etc.).\n\n### Examples\n\n- Retrieve full salary data:\n  ```shell\n  curl https://your-api-url/api/data\n  ```\n\n- Get top salary levels:\n  ```shell\n  curl https://your-api-url/api/top\n  ```\n\n- Get full salary info for a classification and level:\n  ```shell\n  curl https://your-api-url/api/cs-01\n  ```\n\n- Get salary for a specific step:\n  ```shell\n  curl https://your-api-url/api/cr-1/step-3\n  ```\n\n- Get top salary amount for a classification and level:\n  ```shell\n  curl https://your-api-url/api/as-4/top\n  ```\n\n## Installation\n\n1. Clone the repository:\n   ```shell\n   git clone https://github.com/your-username/your-repo-name.git\n   cd your-repo-name\n   ```\n\n2. Install dependencies:\n   ```shell\n   npm install\n   ```\n\n3. Run the API:\n   ```shell\n   npm start\n   ```\n\n## Current Classifications Available\n- AC\n- AG\n- AI\n- AR\n- AS\n- AU\n- BI\n- CAI\n- CH\n- CM\n- CO\n- CR\n- CS\n- CX\n- DA-CON\n- DA-PRO\n- DD\n- DE\n- DS\n- EC\n- EDS\n- EG\n- ETP\n- EX\n- FB\n- FI\n- FO\n- FR\n- FS\n- GT\n- HPS\n- HR\n- IS\n- IT\n- LI\n- LS\n- MA\n- MD-MOF\n- MD-MSP\n- MT\n- ND-ADV\n- ND-DIT\n- ND-HME\n- NU-EMA\n- OE-BEO\n- OE-CEO\n- OE-DEO\n- OE-MEO\n- OE-MSE\n- OM\n- PC\n- PE\n- PG\n- PH\n- PI\n- PM\n- PO-IMA\n- PO-TCO\n- PRS\n- PS\n- PY\n- RO\n- SE-REM\n- SE-RES\n- SG-PAT\n- SG-SRE\n- SO-INS\n- ST-COR\n- ST-OCE\n- ST-SCY\n- ST-STN\n- ST-TYP\n- SW-CHA\n- SW-SCW\n- TI\n- TR\n- UT\n- VM\n- WP\n\n## Contributing\n\nContributions are welcome! If you have any suggestions, enhancements, or bug fixes, please submit an issue or a pull request.\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).\n","size_bytes":2814},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n}\n\nmodule.exports = nextConfig\n","size_bytes":118},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":82},"tailwind.config.ts":{"content":"import type { Config } from 'tailwindcss'\n\nconst config: Config = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  darkMode: 'media',\n  theme: {\n    extend: {\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic':\n          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n      },\n    },\n  },\n  plugins: [],\n}\nexport default config\n","size_bytes":516},"components/Footer.tsx":{"content":"\nimport Link from 'next/link';\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-white border-t border-gray-200 dark:bg-gray-800 dark:border-gray-700\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">About This API</h3>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n              This API provides access to publicly accessible salary information for Canadian public service classifications, \n              sourced from{' '}\n              <a\n                href=\"https://www.tbs-sct.canada.ca/pubs_pol/hrpubs/coll_agre/rates-taux-eng.asp\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:underline dark:text-blue-400\"\n              >\n                TBS-SCT Canada\n              </a>.\n            </p>\n            <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n              <p>‚ö†Ô∏è This API is not affiliated with the Government of Canada.</p>\n              <p>üìö Data provided for educational purposes only.</p>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">Navigation</h3>\n            <div className=\"space-y-2\">\n              <Link href=\"/\" className=\"block text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400\">\n                üè† Home\n              </Link>\n              <Link href=\"/search\" className=\"block text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400\">\n                üîç Advanced Search\n              </Link>\n              <Link href=\"/equivalency\" className=\"block text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400\">\n                ‚öñÔ∏è Salary Equivalency\n              </Link>\n              <a\n                href=\"/api/data\"\n                target=\"_blank\"\n                className=\"block text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400\"\n              >\n                üìä API Documentation\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">Resources</h3>\n            <div className=\"space-y-2\">\n              <a\n                href=\"https://github.com/dougkeefe/ps-salary-data\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"block text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400\"\n              >\n                üìÅ GitHub Repository\n              </a>\n              <a\n                href=\"https://github.com/dougkeefe/ps-salary-data/blob/main/LICENSE\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"block text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400\"\n              >\n                üìú MIT License\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <hr className=\"my-8 border-gray-200 dark:border-gray-700\" />\n        \n        <div className=\"text-center text-gray-500 dark:text-gray-400\">\n          <p>Author: Doug Keefe ‚Ä¢ 2023</p>\n          <p className=\"text-sm mt-1\">Edit: Fabrice Ndizihiwe ‚Ä¢ 2025</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3523},"pages/_app.tsx":{"content":"\nimport '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\nimport Head from 'next/head';\nimport Footer from '../components/Footer';\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <>\n      <Head>\n        <title>Public Servant Salary API</title>\n      </Head>\n      <div className=\"min-h-screen flex flex-col\">\n        <main className=\"flex-grow\">\n          <Component {...pageProps} />\n        </main>\n        <Footer />\n      </div>\n    </>\n  );\n}\n","size_bytes":496},"pages/_document.tsx":{"content":"\nimport { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n","size_bytes":232},"pages/equivalency.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\n\ninterface SalaryData {\n  [key: string]: {\n    'annual-rates-of-pay': Array<{\n      'effective-date': string;\n      [stepKey: string]: string | number;\n    }>;\n  };\n}\n\ninterface TopSalaries {\n  [key: string]: number;\n}\n\ninterface ClassificationInfo {\n  code: string;\n  minSalary: number;\n  maxSalary: number;\n  topSalary: number;\n  stepCount: number;\n  effectiveDate: string;\n}\n\nexport default function Equivalency() {\n  const [salaryData, setSalaryData] = useState<SalaryData | null>(null);\n  const [topSalaries, setTopSalaries] = useState<TopSalaries | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [selectedCode, setSelectedCode] = useState('');\n  const [tolerancePercent, setTolerancePercent] = useState(6);\n  const [comparisonType, setComparisonType] = useState<'top' | 'min' | 'max' | 'average'>('top');\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [dataResponse, topResponse] = await Promise.all([\n          fetch('/api/data'),\n          fetch('/api/top')\n        ]);\n\n        if (!dataResponse.ok || !topResponse.ok) {\n          throw new Error('Failed to fetch data');\n        }\n\n        const dataResult = await dataResponse.json();\n        const topResult = await topResponse.json();\n\n        setSalaryData(dataResult);\n        setTopSalaries(topResult);\n      } catch (err) {\n        setError('Failed to load salary data');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const formatSalary = (amount: number) => {\n    return new Intl.NumberFormat('en-CA', {\n      style: 'currency',\n      currency: 'CAD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getClassificationInfo = (code: string): ClassificationInfo | null => {\n    if (!salaryData || !salaryData[code] || !topSalaries || !topSalaries[code]) return null;\n\n    const rates = salaryData[code]['annual-rates-of-pay'];\n    if (!rates || rates.length === 0) return null;\n\n    const mostRecent = rates[rates.length - 1];\n    const steps = Object.keys(mostRecent).filter(key => key.startsWith('step-'));\n    const stepCount = steps.length;\n    const minSalary = mostRecent[steps[0]];\n    const maxSalary = mostRecent[steps[steps.length - 1]];\n\n    return {\n      code,\n      minSalary: typeof minSalary === 'number' ? minSalary : parseInt(minSalary as string),\n      maxSalary: typeof maxSalary === 'number' ? maxSalary : parseInt(maxSalary as string),\n      topSalary: topSalaries[code],\n      stepCount,\n      effectiveDate: mostRecent['effective-date']\n    };\n  };\n\n  const getAllClassifications = (): ClassificationInfo[] => {\n    if (!topSalaries) return [];\n\n    return Object.keys(topSalaries)\n      .map(code => getClassificationInfo(code))\n      .filter((info): info is ClassificationInfo => info !== null)\n      .sort((a, b) => a.code.localeCompare(b.code));\n  };\n\n  const getSuggestions = () => {\n    if (!selectedCode || !topSalaries) return [];\n\n    const allCodes = Object.keys(topSalaries);\n    return allCodes\n      .filter(code => code.toLowerCase().includes(selectedCode.toLowerCase()))\n      .sort();\n  };\n\n  const suggestions = getSuggestions();\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setSelectedCode(suggestion);\n    setShowSuggestions(false);\n    setSelectedSuggestionIndex(-1);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!showSuggestions || suggestions.length === 0) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedSuggestionIndex(prev => \n          prev < suggestions.length - 1 ? prev + 1 : 0\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedSuggestionIndex(prev => \n          prev > 0 ? prev - 1 : suggestions.length - 1\n        );\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (selectedSuggestionIndex >= 0) {\n          handleSuggestionClick(suggestions[selectedSuggestionIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        setSelectedSuggestionIndex(-1);\n        break;\n    }\n  };\n\n  const findEquivalentClassifications = (targetCode: string): ClassificationInfo[] => {\n    const targetInfo = getClassificationInfo(targetCode);\n    if (!targetInfo) return [];\n\n    const allClassifications = getAllClassifications();\n\n    let targetValue: number;\n    switch (comparisonType) {\n      case 'min':\n        targetValue = targetInfo.minSalary;\n        break;\n      case 'max':\n        targetValue = targetInfo.maxSalary;\n        break;\n      case 'average':\n        targetValue = (targetInfo.minSalary + targetInfo.maxSalary) / 2;\n        break;\n      case 'top':\n      default:\n        targetValue = targetInfo.topSalary;\n        break;\n    }\n\n    const tolerance = targetValue * (tolerancePercent / 100);\n    const minRange = targetValue - tolerance;\n    const maxRange = targetValue + tolerance;\n\n    return allClassifications\n      .filter(info => {\n        if (info.code === targetCode) return false;\n\n        let compareValue: number;\n        switch (comparisonType) {\n          case 'min':\n            compareValue = info.minSalary;\n            break;\n          case 'max':\n            compareValue = info.maxSalary;\n            break;\n          case 'average':\n            compareValue = (info.minSalary + info.maxSalary) / 2;\n            break;\n          case 'top':\n          default:\n            compareValue = info.topSalary;\n            break;\n        }\n\n        return compareValue >= minRange && compareValue <= maxRange;\n      })\n      .sort((a, b) => {\n        let aValue: number, bValue: number;\n        switch (comparisonType) {\n          case 'min':\n            aValue = a.minSalary;\n            bValue = b.minSalary;\n            break;\n          case 'max':\n            aValue = a.maxSalary;\n            bValue = b.maxSalary;\n            break;\n          case 'average':\n            aValue = (a.minSalary + a.maxSalary) / 2;\n            bValue = (b.minSalary + b.maxSalary) / 2;\n            break;\n          case 'top':\n          default:\n            aValue = a.topSalary;\n            bValue = b.topSalary;\n            break;\n        }\n        return Math.abs(aValue - targetValue) - Math.abs(bValue - targetValue);\n      });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-xl\">Loading salary data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-xl text-red-600\">{error}</div>\n      </div>\n    );\n  }\n\n  const allClassifications = getAllClassifications();\n  const selectedInfo = selectedCode ? getClassificationInfo(selectedCode) : null;\n  const equivalentClassifications = selectedCode ? findEquivalentClassifications(selectedCode) : [];\n\n  return (\n    <main className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <Link href=\"/\" className=\"text-blue-500 hover:underline mb-4 inline-block\">\n            ‚Üê Back to Home\n          </Link>\n          <h1 className=\"text-3xl font-bold mb-4 dark:text-white\">Salary Equivalency Tool</h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n            Find classifications with similar salary ranges to help with job comparison and career planning.\n          </p>\n        </div>\n\n        {/* Configuration Section */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8\">\n          <h2 className=\"text-xl font-bold mb-4 dark:text-white\">Comparison Settings</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <label htmlFor=\"classificationInput\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Type Classification Code\n                </label>\n                <input\n                  id=\"classificationInput\"\n                  type=\"text\"\n                  value={selectedCode}\n                  onChange={(e) => {\n                    setSelectedCode(e.target.value.toUpperCase());\n                    setShowSuggestions(e.target.value.length > 0);\n                    setSelectedSuggestionIndex(-1);\n                  }}\n                  onKeyDown={handleKeyDown}\n                  onFocus={() => setShowSuggestions(selectedCode.length > 0)}\n                  onBlur={() => setTimeout(() => setShowSuggestions(false), 150)}\n                  placeholder=\"e.g., CS-01, AS-02, PM-05...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\n                  autoComplete=\"off\"\n                />\n\n                {showSuggestions && suggestions.length > 0 && (\n                  <div className=\"absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-lg max-h-60 overflow-auto\">\n                    {suggestions.map((suggestion, index) => {\n                      const info = getClassificationInfo(suggestion);\n\n                      return (\n                        <div\n                          key={suggestion}\n                          onClick={() => handleSuggestionClick(suggestion)}\n                          className={`px-3 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 border-b border-gray-100 dark:border-gray-700 last:border-b-0 ${\n                            index === selectedSuggestionIndex ? 'bg-blue-50 dark:bg-blue-900/20 ring-1 ring-blue-200 dark:ring-blue-400/30' : ''\n                          }`}\n                        >\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"font-medium text-blue-600 dark:text-blue-400\">{suggestion}</span>\n                            {info && (\n                              <span className=\"text-sm text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded\">\n                                {formatSalary(info.topSalary)}\n                              </span>\n                            )}\n                          </div>\n                          {info && (\n                            <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                              <div className=\"flex justify-between\">\n                                <span>Range: {formatSalary(info.minSalary)} - {formatSalary(info.maxSalary)}</span>\n                                <span>{info.stepCount} steps</span>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n              <div className=\"text-center text-gray-500 dark:text-gray-400\">\n                <span className=\"text-xs\">OR</span>\n              </div>\n              <div>\n                <label htmlFor=\"classification\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Select from Dropdown\n                </label>\n                <select\n                  id=\"classification\"\n                  value={selectedCode}\n                  onChange={(e) => setSelectedCode(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\n                >\n                  <option value=\"\">Choose a classification...</option>\n                  {allClassifications.map(info => (\n                    <option key={info.code} value={info.code}>\n                      {info.code} - {formatSalary(info.topSalary)}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"comparisonType\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Compare By\n              </label>\n              <select\n                id=\"comparisonType\"\n                value={comparisonType}\n                onChange={(e) => setComparisonType(e.target.value as any)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\n              >\n                <option value=\"top\">Top Salary</option>\n                <option value=\"max\">Maximum Step</option>\n                <option value=\"average\">Average Range</option>\n                <option value=\"min\">Minimum Step</option>\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"tolerance\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Tolerance ({tolerancePercent}%)\n              </label>\n              <input\n                id=\"tolerance\"\n                type=\"range\"\n                min=\"1\"\n                max=\"25\"\n                value={tolerancePercent}\n                onChange={(e) => setTolerancePercent(parseInt(e.target.value))}\n                className=\"w-full\"\n              />\n              <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                ¬±{tolerancePercent}% salary range\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Selected Classification Info */}\n        {selectedInfo && (\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6 mb-8\">\n            <h3 className=\"text-xl font-bold mb-4 text-blue-800 dark:text-blue-200\">\n              Reference Classification: {selectedInfo.code}\n            </h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                  {formatSalary(selectedInfo.minSalary)}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Minimum</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                  {formatSalary(selectedInfo.maxSalary)}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Maximum</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                  {formatSalary(selectedInfo.topSalary)}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Top Salary</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                  {selectedInfo.stepCount}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Steps</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Results Section */}\n        {selectedCode && (\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <h3 className=\"text-xl font-bold dark:text-white\">\n                Equivalent Classifications\n              </h3>\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {equivalentClassifications.length} matches found\n              </span>\n            </div>\n\n            {equivalentClassifications.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-xl text-gray-500 dark:text-gray-400 mb-4\">No equivalent classifications found</div>\n                <div className=\"text-gray-400 dark:text-gray-500\">\n                  Try increasing the tolerance percentage or selecting a different comparison type\n                </div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {equivalentClassifications.map((info) => {\n                  let compareValue: number;\n                  let selectedCompareValue: number;\n\n                  switch (comparisonType) {\n                    case 'min':\n                      compareValue = info.minSalary;\n                      selectedCompareValue = selectedInfo!.minSalary;\n                      break;\n                    case 'max':\n                      compareValue = info.maxSalary;\n                      selectedCompareValue = selectedInfo!.maxSalary;\n                      break;\n                    case 'average':\n                      compareValue = (info.minSalary + info.maxSalary) / 2;\n                      selectedCompareValue = (selectedInfo!.minSalary + selectedInfo!.maxSalary) / 2;\n                      break;\n                    case 'top':\n                    default:\n                      compareValue = info.topSalary;\n                      selectedCompareValue = selectedInfo!.topSalary;\n                      break;\n                  }\n\n                  const difference = compareValue - selectedCompareValue;\n                  const percentDiff = (difference / selectedCompareValue) * 100;\n\n                  return (\n                    <div key={info.code} className=\"border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:shadow-lg transition-shadow\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <h4 className=\"text-lg font-semibold text-blue-600 dark:text-blue-400\">{info.code}</h4>\n                        <div className={`text-xs px-2 py-1 rounded-full ${\n                          Math.abs(percentDiff) <= 2 \n                            ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' \n                            : Math.abs(percentDiff) <= 5\n                            ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400'\n                            : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n                        }`}>\n                          {percentDiff > 0 ? '+' : ''}{percentDiff.toFixed(1)}%\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Range:</span>\n                          <span className=\"dark:text-white\">{formatSalary(info.minSalary)} - {formatSalary(info.maxSalary)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Top Salary:</span>\n                          <span className=\"font-medium dark:text-white\">{formatSalary(info.topSalary)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Steps:</span>\n                          <span className=\"dark:text-white\">{info.stepCount}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Difference:</span>\n                          <span className={`font-medium ${\n                            difference > 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                          }`}>\n                            {difference > 0 ? '+' : ''}{formatSalary(Math.abs(difference))}\n                          </span>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-4 flex gap-2\">\n                        <Link\n                          href={`/api/${info.code.toLowerCase()}`}\n                          className=\"text-blue-500 hover:underline text-sm\"\n                          target=\"_blank\"\n                        >\n                          View Details\n                        </Link>\n                        <Link\n                          href={`/search?searchTerm=${info.code}`}\n                          className=\"text-blue-500 hover:underline text-sm\"\n                        >\n                          View\n                        </Link>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        )}\n\n        {!selectedCode && (\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 text-center\">\n            <div className=\"text-xl text-gray-500 dark:text-gray-400 mb-4\">\n              Select a classification to find equivalent positions\n            </div>\n            <div className=\"text-gray-400 dark:text-gray-500\">\n              Choose from the dropdown above to see classifications with similar salary ranges\n            </div>\n          </div>\n        )}\n      </div>\n    </main>\n  );\n}","size_bytes":21770},"pages/index.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\n\ninterface SalaryData {\n  [key: string]: {\n    'annual-rates-of-pay': Array<{\n      'effective-date': string;\n      [stepKey: string]: string | number;\n    }>;\n  };\n}\n\ninterface TopSalaries {\n  [key: string]: number;\n}\n\nexport default function Home() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedClassification, setSelectedClassification] = useState('');\n  const [salaryRange, setSalaryRange] = useState({ min: '', max: '' });\n  const [sortBy, setSortBy] = useState('name');\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [salaryData, setSalaryData] = useState<SalaryData | null>(null);\n  const [topSalaries, setTopSalaries] = useState<TopSalaries | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1);\n\n  const classifications = [\n    'AC', 'AG', 'AI', 'AR', 'AS', 'AU', 'BI', 'CAI', 'CH', 'CM', 'CO', 'CR', 'CS', 'CX',\n    'DA-CON', 'DA-PRO', 'DD', 'DE', 'DS', 'EC', 'EDS', 'EG', 'ETP', 'EX', 'FB', 'FI',\n    'FO', 'FR', 'FS', 'GT', 'HPS', 'HR', 'IS', 'IT', 'LI', 'LS', 'MA', 'MD-MOF', 'MD-MSP',\n    'MT', 'ND-ADV', 'ND-DIT', 'ND-HME', 'NU-EMA', 'OE-BEO', 'OE-CEO', 'OE-DEO', 'OE-MEO',\n    'OE-MSE', 'OM', 'PC', 'PE', 'PG', 'PH', 'PI', 'PM', 'PO-IMA', 'PO-TCO', 'PRS', 'PS',\n    'PY', 'RO', 'SE-REM', 'SE-RES', 'SG-PAT', 'SG-SRE', 'SO-INS', 'ST-COR', 'ST-OCE',\n    'ST-SCY', 'ST-STN', 'ST-TYP', 'SW-CHA', 'SW-SCW', 'TI', 'TR', 'UT', 'VM', 'WP'\n  ];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [dataResponse, topResponse] = await Promise.all([\n          fetch('/api/data'),\n          fetch('/api/top')\n        ]);\n\n        if (dataResponse.ok && topResponse.ok) {\n          const dataResult = await dataResponse.json();\n          const topResult = await topResponse.json();\n          setSalaryData(dataResult);\n          setTopSalaries(topResult);\n        }\n      } catch (err) {\n        console.error('Failed to load data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const formatSalary = (amount: number) => {\n    return new Intl.NumberFormat('en-CA', {\n      style: 'currency',\n      currency: 'CAD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getMostRecentSalaryInfo = (code: string) => {\n    if (!salaryData || !salaryData[code]) return null;\n\n    const rates = salaryData[code]['annual-rates-of-pay'];\n    if (!rates || rates.length === 0) return null;\n\n    const mostRecent = rates[rates.length - 1];\n    const steps = Object.keys(mostRecent).filter(key => key.startsWith('step-'));\n    const stepCount = steps.length;\n    const minSalary = mostRecent[steps[0]];\n    const maxSalary = mostRecent[steps[steps.length - 1]];\n\n    return {\n      effectiveDate: mostRecent['effective-date'],\n      stepCount,\n      minSalary: typeof minSalary === 'number' ? minSalary : parseInt(minSalary as string),\n      maxSalary: typeof maxSalary === 'number' ? maxSalary : parseInt(maxSalary as string),\n    };\n  };\n\n  const getSuggestions = () => {\n    if (!searchTerm || !topSalaries) return [];\n\n    const allCodes = Object.keys(topSalaries);\n    return allCodes\n      .filter(code => code.toLowerCase().includes(searchTerm.toLowerCase()))\n      .sort();\n  };\n\n  const suggestions = getSuggestions();\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setSearchTerm(suggestion);\n    setShowSuggestions(false);\n    setSelectedSuggestionIndex(-1);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!showSuggestions || suggestions.length === 0) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedSuggestionIndex(prev => \n          prev < suggestions.length - 1 ? prev + 1 : 0\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedSuggestionIndex(prev => \n          prev > 0 ? prev - 1 : suggestions.length - 1\n        );\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (selectedSuggestionIndex >= 0) {\n          handleSuggestionClick(suggestions[selectedSuggestionIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        setSelectedSuggestionIndex(-1);\n        break;\n    }\n  };\n\n  const getFilteredClassifications = () => {\n    if (!topSalaries) return [];\n\n    let filtered = Object.keys(topSalaries);\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(code =>\n        code.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Classification filter\n    if (selectedClassification) {\n      filtered = filtered.filter(code =>\n        code.startsWith(selectedClassification.toUpperCase())\n      );\n    }\n\n    // Salary range filter\n    if (salaryRange.min || salaryRange.max) {\n      filtered = filtered.filter(code => {\n        const topSalary = topSalaries[code];\n        const min = salaryRange.min ? parseFloat(salaryRange.min) : 0;\n        const max = salaryRange.max ? parseFloat(salaryRange.max) : Infinity;\n        return topSalary >= min && topSalary <= max;\n      });\n    }\n\n    // Sort\n    filtered.sort((a, b) => {\n      if (sortBy === 'salary-high') {\n        return (topSalaries[b] || 0) - (topSalaries[a] || 0);\n      } else if (sortBy === 'salary-low') {\n        return (topSalaries[a] || 0) - (topSalaries[b] || 0);\n      } else {\n        return a.localeCompare(b);\n      }\n    });\n\n    return filtered;\n  };\n\n  const filteredClassifications = getFilteredClassifications();\n  const stats = topSalaries ? {\n    total: Object.keys(topSalaries).length,\n    highest: Math.max(...Object.values(topSalaries).filter(val => !isNaN(val) && val > 0)),\n    lowest: Math.min(...Object.values(topSalaries).filter(val => !isNaN(val) && val > 0)),\n    average: Math.round(Object.values(topSalaries).filter(val => !isNaN(val) && val > 0).reduce((a, b) => a + b, 0) / Object.values(topSalaries).filter(val => !isNaN(val) && val > 0).length)\n  } : null;\n\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-800 dark:to-gray-900\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden bg-white shadow-lg dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-gray-900 dark:text-gray-100 sm:text-5xl md:text-6xl\">\n              <span className=\"text-blue-600\">Public Servant</span>\n              <br />\n              Salary Data API\n            </h1>\n            <p className=\"mt-6 max-w-2xl mx-auto text-xl text-gray-600 dark:text-gray-300\">\n              Explore and analyze salary information for Canadian public service classifications. \n              Powered by official TBS-SCT data with real-time search and filtering.\n            </p>\n            <div className=\"mt-8 flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link\n                href=\"/search\"\n                className=\"inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors shadow-lg dark:bg-blue-700 dark:hover:bg-blue-800\"\n              >\n                üîç Advanced Search\n              </Link>\n              <Link\n                href=\"/equivalency\"\n                className=\"inline-flex items-center px-6 py-3 bg-purple-600 text-white font-medium rounded-lg hover:bg-purple-700 transition-colors shadow-lg dark:bg-purple-700 dark:hover:bg-purple-800\"\n              >\n                ‚öñÔ∏è Salary Equivalency\n              </Link>\n              <a\n                href=\"/api/data\"\n                target=\"_blank\"\n                className=\"inline-flex items-center px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors shadow-lg dark:bg-green-700 dark:hover:bg-green-800\"\n              >\n                üìä API Documentation\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        {/* Quick Stats */}\n        {stats && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n            <div className=\"bg-white rounded-xl shadow-lg p-6 text-center dark:bg-gray-800\">\n              <div className=\"text-3xl font-bold text-blue-600\">{stats.total}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">Classifications</div>\n            </div>\n            <div className=\"bg-white rounded-xl shadow-lg p-6 text-center dark:bg-gray-800\">\n              <div className=\"text-3xl font-bold text-green-600\">{formatSalary(stats.highest)}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">Highest Salary</div>\n            </div>\n            <div className=\"bg-white rounded-xl shadow-lg p-6 text-center dark:bg-gray-800\">\n              <div className=\"text-3xl font-bold text-orange-600\">{formatSalary(stats.average)}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">Average Salary</div>\n            </div>\n            <div className=\"bg-white rounded-xl shadow-lg p-6 text-center dark:bg-gray-800\">\n              <div className=\"text-3xl font-bold text-purple-600\">{formatSalary(stats.lowest)}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">Lowest Salary</div>\n            </div>\n          </div>\n        )}\n\n        {/* Enhanced Search Section */}\n        <div className=\"bg-white rounded-xl shadow-lg p-8 mb-12 dark:bg-gray-800\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Quick Classification Search</h2>\n            <button\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className=\"text-blue-600 hover:text-blue-800 font-medium dark:text-blue-400 dark:hover:text-blue-300\"\n            >\n              {showAdvanced ? 'Hide' : 'Show'} Advanced Filters\n            </button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n            <div className=\"relative\">\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Search Classifications</label>\n              <input\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => {\n                  setSearchTerm(e.target.value);\n                  setShowSuggestions(e.target.value.length > 0);\n                  setSelectedSuggestionIndex(-1);\n                }}\n                onKeyDown={handleKeyDown}\n                onFocus={() => setShowSuggestions(searchTerm.length > 0)}\n                onBlur={() => setTimeout(() => setShowSuggestions(false), 150)}\n                placeholder=\"e.g., CS-01, AS, PM...\"\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\"\n                autoComplete=\"off\"\n              />\n\n              {showSuggestions && suggestions.length > 0 && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto dark:bg-gray-700 dark:border-gray-600\">\n                  {suggestions.map((suggestion, index) => {\n                    const salaryInfo = getMostRecentSalaryInfo(suggestion);\n                    const topSalary = topSalaries?.[suggestion];\n\n                    return (\n                      <div\n                        key={suggestion}\n                        onClick={() => handleSuggestionClick(suggestion)}\n                        className={`px-3 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 border-b border-gray-100 dark:border-gray-700 last:border-b-0 ${\n                          index === selectedSuggestionIndex ? 'bg-blue-50 dark:bg-blue-900' : ''\n                        }`}\n                      >\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-medium text-blue-600 dark:text-blue-400\">{suggestion}</span>\n                          {topSalary && (\n                            <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                              {formatSalary(topSalary)}\n                            </span>\n                          )}\n                        </div>\n                        {salaryInfo && (\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                            Range: {formatSalary(salaryInfo.minSalary)} - {formatSalary(salaryInfo.maxSalary)}\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Filter by Classification</label>\n              <select\n                value={selectedClassification}\n                onChange={(e) => setSelectedClassification(e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\"\n              >\n                <option value=\"\">All Classifications</option>\n                {classifications.map(classification => (\n                  <option key={classification} value={classification}>\n                    {classification}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Sort By</label>\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\"\n              >\n                <option value=\"name\">Name (A-Z)</option>\n                <option value=\"salary-high\">Salary (High to Low)</option>\n                <option value=\"salary-low\">Salary (Low to High)</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Advanced Filters */}\n          {showAdvanced && (\n            <div className=\"border-t pt-6\">\n              <h3 className=\"text-lg font-semibold mb-4 dark:text-white\">Advanced Filters</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Minimum Salary</label>\n                  <input\n                    type=\"number\"\n                    value={salaryRange.min}\n                    onChange={(e) => setSalaryRange(prev => ({ ...prev, min: e.target.value }))}\n                    placeholder=\"e.g., 50000\"\n                    list=\"salary-suggestions\"\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Maximum Salary</label>\n                  <input\n                    type=\"number\"\n                    value={salaryRange.max}\n                    onChange={(e) => setSalaryRange(prev => ({ ...prev, max: e.target.value }))}\n                    placeholder=\"e.g., 150000\"\n                    list=\"salary-suggestions\"\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\"\n                  />\n                </div>\n              </div>\n\n              <datalist id=\"salary-suggestions\">\n                <option value=\"40000\">40,000</option>\n                <option value=\"50000\">50,000</option>\n                <option value=\"60000\">60,000</option>\n                <option value=\"70000\">70,000</option>\n                <option value=\"80000\">80,000</option>\n                <option value=\"90000\">90,000</option>\n                <option value=\"100000\">100,000</option>\n                <option value=\"120000\">120,000</option>\n                <option value=\"150000\">150,000</option>\n                <option value=\"200000\">200,000</option>\n              </datalist>\n            </div>\n          )}\n\n          <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-4\">\n            Showing {filteredClassifications.length} of {stats?.total || 0} classifications\n          </div>\n        </div>\n\n        {/* Quick Results Preview */}\n        {filteredClassifications.length > 0 && (\n          <div className=\"bg-white rounded-xl shadow-lg p-8 mb-12 dark:bg-gray-800\">\n            <h3 className=\"text-xl font-bold mb-6 dark:text-white\">Quick Results</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n              {filteredClassifications.slice(0, 8).map((code) => {\n                const salaryInfo = getMostRecentSalaryInfo(code);\n                const topSalary = topSalaries?.[code];\n\n                return (\n                  <div key={code} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow dark:bg-gray-700\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h4 className=\"font-semibold text-blue-600 dark:text-blue-400\">{code}</h4>\n                      {topSalary && (\n                        <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full dark:bg-green-900 dark:text-green-300\">\n                          {formatSalary(topSalary)}\n                        </span>\n                      )}\n                    </div>\n                    {salaryInfo && (\n                      <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                        <div>Range: {formatSalary(salaryInfo.minSalary)} - {formatSalary(salaryInfo.maxSalary)}</div>\n                        <div>Steps: {salaryInfo.stepCount}</div>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            {filteredClassifications.length > 8 && (\n              <div className=\"text-center mt-6\">\n                <Link\n                  href=\"/search\"\n                  className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors dark:bg-blue-700 dark:hover:bg-blue-800\"\n                >\n                  View All {filteredClassifications.length} Results\n                </Link>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* API Documentation Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n          <div className=\"bg-white rounded-xl shadow-lg p-8 dark:bg-gray-800\">\n            <h2 className=\"text-xl font-bold mb-4 dark:text-white\">API Endpoints</h2>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm font-mono dark:bg-blue-900 dark:text-blue-300\">/api/data</span>\n                <span className=\"text-gray-600 dark:text-gray-300\">Full salary data</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"bg-green-100 text-green-800 px-2 py-1 rounded text-sm font-mono dark:bg-green-900 dark:text-green-300\">/api/top</span>\n                <span className=\"text-gray-600 dark:text-gray-300\">Top salary levels</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"bg-purple-100 text-purple-800 px-2 py-1 rounded text-sm font-mono dark:bg-purple-900 dark:text-purple-300\">/api/cs-01</span>\n                <span className=\"text-gray-600 dark:text-gray-300\">Specific classification</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"bg-orange-100 text-orange-800 px-2 py-1 rounded text-sm font-mono dark:bg-orange-900 dark:text-orange-300\">/api/cs-01/current</span>\n                <span className=\"text-gray-600 dark:text-gray-300\">Current salary steps</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-lg p-8 dark:bg-gray-800\">\n            <h2 className=\"text-xl font-bold mb-4 dark:text-white\">Popular Classifications</h2>\n            <div className=\"space-y-2\">\n              {['CS', 'AS', 'PM', 'EC', 'FI', 'IS'].map(code => (\n                <Link\n                  key={code}\n                  href={`/api/${code.toLowerCase()}`}\n                  className=\"flex items-center justify-between p-2 rounded hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n                >\n                  <span className=\"font-medium text-gray-800 dark:text-gray-100\">{code}</span>\n                  <span className=\"text-blue-600 dark:text-blue-400\">‚Üí</span>\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        \n      </div>\n    </main>\n  );\n}","size_bytes":21928},"pages/search.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\n\ninterface SalaryData {\n  [key: string]: {\n    'annual-rates-of-pay': Array<{\n      'effective-date': string;\n      [stepKey: string]: string | number;\n    }>;\n  };\n}\n\ninterface TopSalaries {\n  [key: string]: number;\n}\n\nexport default function Search() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedClassification, setSelectedClassification] = useState('');\n  const [salaryData, setSalaryData] = useState<SalaryData | null>(null);\n  const [topSalaries, setTopSalaries] = useState<TopSalaries | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1);\n\n  const classifications = [\n    'AC', 'AG', 'AI', 'AR', 'AS', 'AU', 'BI', 'CAI', 'CH', 'CM', 'CO', 'CR', 'CS', 'CX',\n    'DA-CON', 'DA-PRO', 'DD', 'DE', 'DS', 'EC', 'EDS', 'EG', 'ETP', 'EX', 'FB', 'FI',\n    'FO', 'FR', 'FS', 'GT', 'HPS', 'HR', 'IS', 'IT', 'LI', 'LS', 'MA', 'MD-MOF', 'MD-MSP',\n    'MT', 'ND-ADV', 'ND-DIT', 'ND-HME', 'NU-EMA', 'OE-BEO', 'OE-CEO', 'OE-DEO', 'OE-MEO',\n    'OE-MSE', 'OM', 'PC', 'PE', 'PG', 'PH', 'PI', 'PM', 'PO-IMA', 'PO-TCO', 'PRS', 'PS',\n    'PY', 'RO', 'SE-REM', 'SE-RES', 'SG-PAT', 'SG-SRE', 'SO-INS', 'ST-COR', 'ST-OCE',\n    'ST-SCY', 'ST-STN', 'ST-TYP', 'SW-CHA', 'SW-SCW', 'TI', 'TR', 'UT', 'VM', 'WP'\n  ];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [dataResponse, topResponse] = await Promise.all([\n          fetch('/api/data'),\n          fetch('/api/top')\n        ]);\n\n        if (!dataResponse.ok || !topResponse.ok) {\n          throw new Error('Failed to fetch data');\n        }\n\n        const dataResult = await dataResponse.json();\n        const topResult = await topResponse.json();\n\n        setSalaryData(dataResult);\n        setTopSalaries(topResult);\n\n        // Check for searchTerm in URL params\n        const urlParams = new URLSearchParams(window.location.search);\n        const searchTermParam = urlParams.get('searchTerm');\n        if (searchTermParam) {\n          setSearchTerm(searchTermParam);\n        }\n      } catch (err) {\n        setError('Failed to load salary data');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const filteredClassifications = classifications.filter(classification =>\n    classification.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getSuggestions = () => {\n    if (!searchTerm || !salaryData) return [];\n\n    const allCodes = Object.keys(salaryData);\n    return allCodes\n      .filter(code => code.toLowerCase().includes(searchTerm.toLowerCase()))\n      .sort();\n  };\n\n  const suggestions = getSuggestions();\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setSearchTerm(suggestion);\n    setShowSuggestions(false);\n    setSelectedSuggestionIndex(-1);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!showSuggestions || suggestions.length === 0) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedSuggestionIndex(prev => \n          prev < suggestions.length - 1 ? prev + 1 : 0\n        );\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedSuggestionIndex(prev => \n          prev > 0 ? prev - 1 : suggestions.length - 1\n        );\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (selectedSuggestionIndex >= 0) {\n          handleSuggestionClick(suggestions[selectedSuggestionIndex]);\n        }\n        break;\n      case 'Escape':\n        setShowSuggestions(false);\n        setSelectedSuggestionIndex(-1);\n        break;\n    }\n  };\n\n  const getFilteredSalaryData = () => {\n    if (!salaryData) return [];\n\n    let filtered = Object.keys(salaryData);\n\n    if (searchTerm) {\n      filtered = filtered.filter(key =>\n        key.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    if (selectedClassification) {\n      filtered = filtered.filter(key =>\n        key.startsWith(selectedClassification.toUpperCase())\n      );\n    }\n\n    return filtered.sort();\n  };\n\n  const formatSalary = (amount: number) => {\n    return new Intl.NumberFormat('en-CA', {\n      style: 'currency',\n      currency: 'CAD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getMostRecentSalaryInfo = (code: string) => {\n    if (!salaryData || !salaryData[code]) return null;\n\n    const rates = salaryData[code]['annual-rates-of-pay'];\n    if (!rates || rates.length === 0) return null;\n\n    const mostRecent = rates[rates.length - 1];\n    const steps = Object.keys(mostRecent).filter(key => key.startsWith('step-'));\n    const stepCount = steps.length;\n    const minSalary = mostRecent[steps[0]];\n    const maxSalary = mostRecent[steps[steps.length - 1]];\n\n    return {\n      effectiveDate: mostRecent['effective-date'],\n      stepCount,\n      minSalary: typeof minSalary === 'number' ? minSalary : parseInt(minSalary as string),\n      maxSalary: typeof maxSalary === 'number' ? maxSalary : parseInt(maxSalary as string),\n    };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-xl\">Loading salary data...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-xl text-red-600\">{error}</div>\n      </div>\n    );\n  }\n\n  const filteredSalaryData = getFilteredSalaryData();\n\n  // Calculate stats from filtered data instead of all data\n  const filteredStats = filteredSalaryData.length > 0 && topSalaries ? {\n    total: filteredSalaryData.length,\n    highest: Math.max(...filteredSalaryData.map(code => topSalaries[code]).filter(val => !isNaN(val) && val > 0)),\n    lowest: Math.min(...filteredSalaryData.map(code => topSalaries[code]).filter(val => !isNaN(val) && val > 0)),\n    average: Math.round(filteredSalaryData.map(code => topSalaries[code]).filter(val => !isNaN(val) && val > 0).reduce((a, b) => a + b, 0) / filteredSalaryData.map(code => topSalaries[code]).filter(val => !isNaN(val) && val > 0).length)\n  } : null;\n\n  return (\n    <main className=\"min-h-screen p-8 text-gray-900 dark:text-gray-100 bg-gray-50 dark:bg-gray-900\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8\">\n          <Link href=\"/\" className=\"text-blue-500 hover:underline mb-4 inline-block\">\n            ‚Üê Back to API Documentation\n          </Link>\n          <h1 className=\"text-3xl font-bold mb-4\">Public Servant Salary Search</h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n            Search and explore salary data for Canadian public service classifications\n          </p>\n        </div>\n\n        {/* Search and Filter Section */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div className=\"relative\">\n              <label htmlFor=\"search\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Search Classifications\n              </label>\n              <input\n                id=\"search\"\n                type=\"text\"\n                value={searchTerm}\n                onChange={(e) => {\n                  setSearchTerm(e.target.value);\n                  setShowSuggestions(e.target.value.length > 0);\n                  setSelectedSuggestionIndex(-1);\n                }}\n                onKeyDown={handleKeyDown}\n                onFocus={() => setShowSuggestions(searchTerm.length > 0)}\n                onBlur={() => setTimeout(() => setShowSuggestions(false), 150)}\n                placeholder=\"e.g., CS-01, AS, PM...\"\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                autoComplete=\"off\"\n              />\n\n              {showSuggestions && suggestions.length > 0 && (\n                <div className=\"absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md shadow-lg max-h-60 overflow-auto\">\n                  {suggestions.map((suggestion, index) => {\n                    const salaryInfo = getMostRecentSalaryInfo(suggestion);\n                    const topSalary = topSalaries?.[suggestion];\n\n                    return (\n                      <div\n                        key={suggestion}\n                        onClick={() => handleSuggestionClick(suggestion)}\n                        className={`px-3 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 border-b border-gray-100 dark:border-gray-700 last:border-b-0 ${\n                          index === selectedSuggestionIndex ? 'bg-blue-50 dark:bg-blue-900 ring-1 ring-blue-200 dark:ring-blue-700' : ''\n                        }`}\n                      >\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-medium text-blue-600 dark:text-blue-400\">{suggestion}</span>\n                          {topSalary && (\n                            <span className=\"text-sm text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded\">\n                              {formatSalary(topSalary)}\n                            </span>\n                          )}\n                        </div>\n                        {salaryInfo && (\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                            <div className=\"flex justify-between\">\n                              <span>Range: {formatSalary(salaryInfo.minSalary)} - {formatSalary(salaryInfo.maxSalary)}</span>\n                              <span>{salaryInfo.stepCount} steps</span>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n            <div>\n              <label htmlFor=\"classification\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Filter by Classification\n              </label>\n              <input\n                id=\"classification\"\n                type=\"text\"\n                value={selectedClassification}\n                onChange={(e) => setSelectedClassification(e.target.value.toUpperCase())}\n                placeholder=\"Type or select classification...\"\n                list=\"classifications-list\"\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n              <datalist id=\"classifications-list\">\n                <option value=\"\">All Classifications</option>\n                {classifications.map(classification => (\n                  <option key={classification} value={classification}>\n                    {classification}\n                  </option>\n                ))}\n              </datalist>\n            </div>\n          </div>\n\n          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Showing {filteredSalaryData.length} results\n          </div>\n        </div>\n\n        {/* Results Section */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredSalaryData.map((code) => {\n            const salaryInfo = getMostRecentSalaryInfo(code);\n            const topSalary = topSalaries?.[code];\n\n            return (\n              <div key={code} className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow\">\n                <div className=\"flex justify-between items-start mb-3\">\n                  <h3 className=\"text-xl font-semibold text-blue-600 dark:text-blue-400\">{code}</h3>\n                  {topSalary && (\n                    <span className=\"bg-green-100 dark:bg-green-800 text-green-800 dark:text-green-200 text-xs px-2 py-1 rounded-full\">\n                      Top: {formatSalary(topSalary)}\n                    </span>\n                  )}\n                </div>\n\n                {salaryInfo && (\n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Range:</span> {formatSalary(salaryInfo.minSalary)} - {formatSalary(salaryInfo.maxSalary)}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Steps:</span> {salaryInfo.stepCount}\n                    </div>\n                    <div className=\"text-gray-600 dark:text-gray-400\">\n                      <span className=\"font-medium\">Effective:</span> {salaryInfo.effectiveDate}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"mt-4 flex gap-2\">\n                  <Link\n                    href={`/api/${code.toLowerCase()}`}\n                    className=\"text-blue-500 hover:underline text-sm\"\n                    target=\"_blank\"\n                  >\n                    View Full Data\n                  </Link>\n                  <Link\n                    href={`/api/${code.toLowerCase()}/current`}\n                    className=\"text-blue-500 hover:underline text-sm\"\n                    target=\"_blank\"\n                  >\n                    Current Steps\n                  </Link>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {filteredSalaryData.length === 0 && (\n          <div className=\"text-center py-12\">\n            <div className=\"text-xl text-gray-500 dark:text-gray-400 mb-4\">No results found</div>\n            <div className=\"text-gray-400 dark:text-gray-500\">\n              Try adjusting your search terms or filters\n            </div>\n          </div>\n        )}\n\n        {/* Statistics Section */}\n        {filteredStats && (\n          <div className=\"mt-12 bg-gray-50 dark:bg-gray-800 rounded-lg p-6\">\n            <h2 className=\"text-2xl font-bold mb-4 dark:text-white\">Filtered Results Stats</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                  {filteredStats.total}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300\">Total Classifications</div>\n              </div>\n              <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                  {formatSalary(filteredStats.highest)}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300\">Highest Salary</div>\n              </div>\n              <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\">\n                  {formatSalary(filteredStats.average)}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300\">Average Salary</div>\n              </div>\n              <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\n                  {formatSalary(filteredStats.lowest)}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-300\">Lowest Salary</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </main>\n  );\n}","size_bytes":15885},"styles/globals.css":{"content":"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nhtml,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,\n    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n@media (prefers-color-scheme: dark) {\n  html {\n    color-scheme: dark;\n  }\n}\n","size_bytes":414},"pages/api/data.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    // Define the path to the JSON file\n    const filePath = path.join(process.cwd(), 'data', 'data.json');\n\n    // Check if the file exists\n    try {\n        await fs.access(filePath);\n    } catch {\n        return res.status(404).json({ error: 'File not found' });\n    }\n\n    // Read the file asynchronously\n    const data = await fs.readFile(filePath, 'utf8');\n\n    // Attempt to parse the JSON\n    let jsonData;\n    try {\n      jsonData = JSON.parse(data);\n    } catch (parseError) {\n      return res.status(400).json({ error: 'Failed to parse the JSON file' });\n    }\n\n    // Send parsed data as a response\n    res.status(200).json(jsonData);\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'An unexpected error occurred' });\n  }\n}\n","size_bytes":972},"pages/api/top.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    // Define the path to the JSON file\n    const filePath = path.join(process.cwd(), 'data', 'data.json');\n\n    // Check if the file exists\n    try {\n      await fs.access(filePath);\n    } catch {\n      return res.status(404).json({ error: 'File not found' });\n    }\n\n    // Read the file asynchronously\n    const data = await fs.readFile(filePath, 'utf8');\n\n    // Attempt to parse the JSON\n    let jsonData;\n    try {\n      jsonData = JSON.parse(data);\n    } catch (parseError) {\n      return res.status(400).json({ error: 'Failed to parse the JSON file' });\n    }\n\n    // Extract the top values for each code and aggregate them into an object\n    const result: any = {};\n\n    // Loop over each key (pay scale code) in jsonData\n    for (const code of Object.keys(jsonData)) {\n      if (jsonData[code]) {\n        const rates = jsonData[code][\"annual-rates-of-pay\"];\n        if (rates && rates.length > 0) {\n          const lastRate = rates[rates.length - 1];\n          const keys = Object.keys(lastRate);\n          if (keys.length > 0) {\n            const lastStepKey = keys[keys.length - 1];\n            if (lastRate[lastStepKey] !== undefined) {\n              result[code] = lastRate[lastStepKey];\n            }\n          }\n        }\n      }\n    }\n\n    res.status(200).json(result);\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'An unexpected error occurred' });\n  }\n}\n","size_bytes":1612},"pages/api/[code]/[step].ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    // Define the path to the JSON file\n    const filePath = path.join(process.cwd(), 'data', 'data.json');\n\n    // Check if the file exists\n    try {\n      await fs.access(filePath);\n    } catch {\n      return res.status(404).json({ error: 'File not found' });\n    }\n\n    // Read the file asynchronously\n    const data = await fs.readFile(filePath, 'utf8');\n\n    // Attempt to parse the JSON\n    let jsonData;\n    try {\n      jsonData = JSON.parse(data);\n    } catch (parseError) {\n      return res.status(400).json({ error: 'Failed to parse the JSON file' });\n    }\n\n    // Extract the desired subset based on the dynamic segment (code)\n    const desiredCode = req.query.code?.toString().toUpperCase();\n\n    // Validate the provided code\n    if (!desiredCode || !jsonData[desiredCode]) {\n      return res.status(404).json({ error: 'Code not found' });\n    }\n\n    const rates = jsonData[desiredCode][\"annual-rates-of-pay\"];\n    const lastRate = rates[rates.length - 1];\n\n    // Extract the desired step based on the dynamic segment (step)\n    const desiredStep = req.query.step?.toString();\n\n    // Validate the provided step and return the corresponding value\n    if (desiredStep && lastRate[desiredStep]) {\n      res.status(200).json({ [desiredStep]: lastRate[desiredStep] });\n    } else {\n      res.status(404).json({ error: 'Step not found' });\n    }\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'An unexpected error occurred' });\n  }\n}\n","size_bytes":1681},"pages/api/[code]/current.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    // Define the path to the JSON file\n    const filePath = path.join(process.cwd(), 'data', 'data.json');\n\n    // Check if the file exists\n    try {\n      await fs.access(filePath);\n    } catch {\n      return res.status(404).json({ error: 'File not found' });\n    }\n\n    // Read the file asynchronously\n    const data = await fs.readFile(filePath, 'utf8');\n\n    // Attempt to parse the JSON\n    let jsonData;\n    try {\n      jsonData = JSON.parse(data);\n    } catch (parseError) {\n      return res.status(400).json({ error: 'Failed to parse the JSON file' });\n    }\n\n    // Extract the desired subset based on the dynamic segment (code)\n    const desiredCode = req.query.code?.toString().toUpperCase();\n\n    if (!desiredCode || !jsonData[desiredCode]) {\n      return res.status(404).json({ error: 'Code not found' });\n    }\n\n    const rates = jsonData[desiredCode][\"annual-rates-of-pay\"];\n    const lastRate = rates[rates.length - 1];\n\n    // Extract all steps from the last annual rate of pay object\n    const steps = Object.keys(lastRate)\n      .filter(key => key.startsWith('step-'))\n      .map(key => ({ [key]: lastRate[key] }));\n\n    // Check if steps were found\n    if (steps.length === 0) {\n      return res.status(404).json({ error: 'Steps not found' });\n    }\n\n    // Return the steps as a JSON array\n    res.status(200).json(steps);\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'An unexpected error occurred' });\n  }\n}\n","size_bytes":1670},"pages/api/[code]/index.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport fs from 'fs/promises';\nimport path from 'path';\n\ntype JsonData = {\n  [key: string]: any;\n};\n\nfunction findAllInKeys(data: JsonData, searchStr: string): JsonData {\n  let matches: JsonData = {};\n  for (let key in data) {\n    if (key.startsWith(searchStr)) {\n      matches[key] = data[key];\n    }\n  }\n  return matches;\n}\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    // Define the path to the JSON file\n    const filePath = path.join(process.cwd(), 'data', 'data.json');\n\n    // Check if the file exists\n    try {\n      await fs.access(filePath);\n    } catch {\n      return res.status(404).json({ error: 'File not found' });\n    }\n\n    // Read the file asynchronously\n    const data = await fs.readFile(filePath, 'utf8');\n\n    // Attempt to parse the JSON\n    let jsonData;\n    try {\n      jsonData = JSON.parse(data);\n    } catch (parseError) {\n      return res.status(400).json({ error: 'Failed to parse the JSON file' });\n    }\n\n    const validData = jsonData as JsonData;\n\n    // Extract the desired subset based on the dynamic segment (code)\n    const desiredSubset = req.query.code?.toString().toUpperCase();\n\n    if (!desiredSubset) {\n      return res.status(400).json({ error: 'Please provide a subset to search for.' });\n    }\n\n    // Search based on a string in the key\n    const results = findAllInKeys(validData, desiredSubset);\n\n    if (Object.keys(results).length > 0) {\n      res.status(200).json(results);\n    } else {\n      res.status(404).json({ error: 'Subset ' + desiredSubset + ' not found in any keys. A common error is not including a leading zero in the classification (eg: AS-01).' });\n    }\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'An unexpected error occurred' });\n  }\n\n}\n\n","size_bytes":1851},"pages/api/[code]/top.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    // Define the path to the JSON file\n    const filePath = path.join(process.cwd(), 'data', 'data.json');\n\n    // Check if the file exists\n    try {\n      await fs.access(filePath);\n    } catch {\n      return res.status(404).json({ error: 'File not found' });\n    }\n\n    // Read the file asynchronously\n    const data = await fs.readFile(filePath, 'utf8');\n\n    // Attempt to parse the JSON\n    let jsonData;\n    try {\n      jsonData = JSON.parse(data);\n    } catch (parseError) {\n      return res.status(400).json({ error: 'Failed to parse the JSON file' });\n    }\n\n    // Extract the desired subset based on the dynamic segment (code)\n    const desiredCode = req.query.code?.toString().toUpperCase();\n\n    if (!desiredCode || !jsonData[desiredCode]) {\n      return res.status(404).json({ error: 'Code not found' });\n    }\n\n    const rates = jsonData[desiredCode][\"annual-rates-of-pay\"];\n    const lastRate = rates[rates.length - 1];\n\n    // Extract the last key (step) and its value\n    const lastStepKey = Object.keys(lastRate).pop();\n    const lastValue = lastRate[lastStepKey!];\n\n    if (typeof lastValue === 'number') {\n      res.status(200).send(String(lastValue));\n    } else {\n      res.status(404).json({ error: 'Value not found' });\n    }\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: 'An unexpected error occurred' });\n  }\n}\n","size_bytes":1577}},"version":1}